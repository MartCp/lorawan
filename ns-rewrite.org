* Network Server development diary
  This document collects tasks regarding the Network Server development in the
  ns-3 ~lorawan~ module.
** To do
*** TODO Change connection technology between NS and GWs
    Maybe implement something better than multiple PointToPoint links, like a
    CSMA-based bus link?
*** TODO Implement Scheduler class
    This class keeps track of all possible receive windows generated by all UL
    packets, and decides whether and when to reply based on the Network Status.
*** TODO Implement Network Status class
    This class essentially collects a map of EndDeviceStatus and a map of
    GatewayStatus objects, and (maybe in the future?) provides helper functions
    to modify the state of the network.
*** TODO Implement DeviceStatus class
    This class needs to hold the following attributes:
    - Current parameters used by the device
      - SF
      - Transmission power
      - Other relevant flags indicating the status of the device w.r.t. various
        procedures involving MAC commands.
    - History of packets received from the device. For each packet:
      - List of GWs that received the packet
        - Time of reception
        - Reception power (or SNR)
      - SF
      - BW
      - Frequency
    - Next Reply intended for the device
*** TODO Implement GatewayStatus class
    Initially, this can consist in a pointer to the GatewayLoraMac object. This
    is 'cheating', however it's justified by the fact that the Network Server
    is assumed to have a reliable and fast connection to the Gateway to query
    its status in real time.
*** TODO Implement Network Controller
    This class executes a series of functions upon reception of an UL packet.
    These functions include:
    - Management of Reply header flags
    - Implementation of MAC commands
    - Informing the ADR algorithm of the new packet

    Maybe we could structure this as a list of NetworkControllerComponent
    objects, that implement a common interface, are executed upon reception of
    new packets, and that perform distinct functions, like ADR, Join procedure
    handling, and so on (essentially, those described above).
*** TODO Implement example ADR algorithm
    Something dumb, just to showcase the interface and see that this works.
*** TODO Implement new Receive method
*** TODO Implement new Send method
*** TODO Implement an example application running on the NS
    Maybe we can build an application that simply collects packets from the EDs
    and prints something on successful new packets. Just to show that the NS app
    can actually support something in an hypothetical upper layer.
** In progress
** Done
